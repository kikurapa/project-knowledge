1) how to call one service to another service
2) what are the annotation we will use in controller class
3) int arr[] = new int[]{1,2,3,3,4,5,5,6,7,6,8}
   write a programe to disply with out repeted value with out using collection
 
4) write a quary to get employee details based on department name(like HR department)
5) What is @Jsoninclud annotation ?
A) @JsonInclude is used at exclude properties having null/empty or default values.
6) HashMap improvement in Java 8 ?
A)To improve the working of HashMap, Java 8 made updates to the internal implementation workflow. Once a certain threshold level is reached, the values are now automatically stored in a tree manner rather than a linked list. So instead of O(n) retrieval time, we now have better O(log n) retrieval performance

7) Difference between WeekHashMap and HashMap ?
A) WeakHashMap is almost same as HashMap except in case of WeakHashMap, if object is specified as key doesn't contain any references- it is eligible for garbage collection even though it is associated with WeakHashMap. i.e Garbage Collector dominates over WeakHashMap

8) What is hashing ?
A) In hashing there is a hash function that maps keys to some values. But these hashing function may lead to collision that is two or more keys are mapped to same value. Chain hashing avoids collision. The idea is to make each cell of hash table point to a linked list of records that have same hash function value.

Let’s create a hash function, such that our hash table has ‘N’ number of buckets. 
To insert a node into the hash table, we need to find the hash index for the given key. And it could be calculated using the hash function.
Example: hashIndex = key % noOfBuckets

Insert: Move to the bucket corresponds to the above calculated hash index and insert the new node at the end of the list
Delete: To delete a node from hash table, calculate the hash index for the key, move to the bucket corresponds to the calculated hash index, search the list in the current bucket to find and remove the node with the given key (if found).  

Example: hashIndex = key % noOfBuckets

Insert: Move to the bucket corresponds to the above calculated hash index and insert the new node at the end of the list.

9) What is bubble sort java time complexity ? -> 0(n2)
10) What is linear sort Java time complexity ? -> 0(n)
11) If we have bulk data and I want to get in assending order with fast which Utill will use ?
12) what is marker interface ?
A)  It is an empty interface (no field or methods). Examples of marker interface are Serializable, Cloneable and Remote interface

13) what is function interface ?
A) Functional interfaces contain a single abstract method and can have multiple default or static methods

14) int i =12345 write a programe to print output reverese ?
15) int arr[] = {1,2,3,4,5} write a programe to ptint second highest number without using predefine collection ?

16) what is ConcurentModificationException and how to handle ?
A) 1. Use a different data structure: Consider using a data structure that does not throw a ConcurrentModificationException , such as a CopyOnWriteArrayList.
   2. Create a copy of the collection: Create a copy of the collection before performing any operations on it. This will ensure that the original collection is not modified while you are performing other operations on it.
   3. Use a synchronized collection: Use a synchronized collection, such as Collections.synchronizedList, to ensure that only one operation is performed on the collection at a time.
   4. Use a lock: Use a lock to ensure that only one operation is performed on the collection at a time.
   5. Use a concurrent data structure: Use a concurrent data structure, such as a ConcurrentHashMap, that supports concurrent modification.

17) how HashMap put() method will work internally ?
A) HashMap. put() method of HashMap is used to insert a mapping into a map. This means we can insert a specific key and the value it is mapping to into a      particular map. If an existing key is passed then the previous value gets replaced by the new value

18) what are the String methods ?
A) charAt(),compareTo(), compareToIgnoreCase(),concat(),contains(),copyValueOf(),endsWith(),equals(),equalsIgnoreCase(),getChars(),hashCode(),indexOf(), isEmpty(), lastIndexOf(),length(),replace(),replaceFirst(),replaceAll(),split(),startsWith(),subSequence(),substring(),toCharArray(),toLowerCase(),toUpperCase()
toString(),trim(),valueOf()

19) Transient and volatile?
A) Transient variables help in excluding specific fields from serialization, ensuring sensitive or non-serializable data remains private. On the other hand, volatile variables ensure that all threads access the most up-to-date value, preventing any inconsistencies caused by caching or optimization

20) Employee table has 4 columns empid,empname,salary,dateofjoin
write a query to retrive all the 4 columns with if emp joins 2 years before display salary with 10% increment
if emp joins below 2 years display original salary 
A) SELECT salary + (salary * 15/100) as Salary, emp_name
From employee_info
Where DATEDIFF(MONTH, dateofjoin, GETDATE())/12 =2
21) int[] a = {5,	6,	2,	3,	4,	9};
    int[] b = {11,	23,	14,	33,	29,	30};
   int x = 38
Find the closest pair of sum of two array(like 5+11 is closest of 38)
https://www.geeksforgeeks.org/given-two-unsorted-arrays-find-pairs-whose-sum-x/

another variation : https://www.geeksforgeeks.org/given-sorted-array-number-x-find-pair-array-whose-sum-closest-x/

22) Is this below code correct or not ?
class A implements serializable {
B b1 = new B();

String s = "sss";
int a = 10;
}
class B {
}
23) whis left join and right join ?
24) how to create anonymous inner class ?
 https://www.programiz.com/java-programming/anonymous-class
 
Spring Boot
1) @ComponentScan
2) Can i use two data sources in spring Boot

Microservices 
1) how to configure Circute breaker 
2) if i want to update the user details which request we will use ? PUT or POST
3) using PUT method how to update user deatils
4) sapose you createted one service using 8003 port and deployed, this service given to ReactJS frontend and frontend will use this service with port 8003
    later you changed the port to 8007 in this senario how to know the frontend port got changed ?
5) 12 factor
A) Backing services, Concurrency, Admin processes,The release and run stages,Codebase,Dependencies,Disposability,Port binding,Config,Logs,Processes,Export services with docker port binding
6) how you troubleshoot API services ?
A) 
->Spring Cloud Sleuth:
Spring Cloud Sleuth is a Spring Cloud library that provides the ability to track the progress of subsequent microservices by adding trace and span Ids on the appropriate HTTP request headers. The Sleuth library is based on the MDC (Mapped Diagnostic Context) concept, where we can easily extract values, put to context, and display them in the log.
Application name: The name of the application that is defined in the properties file.
Trace Id: The Sleuth adds the Trace Id. It remains the same in all services for a given request.
Span Id: The Sleuth also adds the Span Id. It remains the same in a unit of work but different for different services for a given request.
Zipkin Export Flag: It indicates a boolean value. It can be either true

->Zipkin:
Zipkin is an open-source, Java-based distributed tracing system. It has a management console that provides a mechanism for sending, receiving, storing, and visualizing traces details of the subsequent services.
With the help of the Zipkin server, we can put all the logs of all the components in the MQ (RabbitMQ). We send the logs to the Zipkin server where the logs consolidate. After doing this, we can monitor different requests. We can also find what is happening to a specific request?

7) Media type response ?
A) application/json
   application/xml
   application/x-www-form-urlencoded
   multipart/form-data
   text/plain; charset=utf-8
   text/html
   application/pdf
   image/png
8) how to handle multiple query parameters in rest url ?
A) String url = "http://localhost:8080/restService/{urlParameter}?queryParameter= {queryParameter}";
   RestTemplate template = new RestTemplate();
 
        HttpHeaders headers = new HttpHeaders();
        HttpEntity requestEntity = new HttpEntity<>(headers);
 
        Map<String, String> uriVariables = new HashMap<>();
 
        uriVariables.put("urlParameter", "myURLParameter");
        uriVariables.put("queryParameter", "myQueryParameter");
 
        ResponseEntity<Map> response = template.exchange(url, HttpMethod.GET, requestEntity, Map.class, uriVariables);         
        return response.getBody();
		
9) Have you used spring cloud ? and which senario ?
A) Spring Cloud provides tools for developers to quickly build some of the common patterns in distributed systems (e.g. configuration management, service discovery, circuit breakers, intelligent routing, micro-proxy, control bus, one-time tokens, global locks, leadership election, distributed sessions, cluster state). 
